Author: Martin
Date: 2015-02-15 14:16
Title: 1、[C++]设计模式与面向对象

<blockquote>此目录下的内容均摘自 <大话设计模式>或其他资料</blockquote>




#### 设计模式是否有必要学?


答案在我看来是肯定的, 学这些不是考虑将来会不会用到, 而是在学习的过程中进行的思想洗礼, 通过这些模式让我们找到编程的感觉, 从而设计出易维护 易扩展 易复用 灵活性好的程序.


<blockquote>模式不是设计出来的, 是重构出来的. 好的设计也不是设计出来的，是重构出来的.
在<大话设计模式>中, 大部分的情况都是小菜先写出一个”垃圾代码”, 然后发现问题, 再对它进行重构.

**设计模式代表了传统的软件开发思想**: 好的设计会产生好的软件, 因此在实际开发之前, 值得花时间去做一个全面而细致的设计.
**重构代表了敏捷软件开发的浪潮**: 软件并不是在一开始就可以设计得完美无缺的, 因此可以先进行实际开发, 然后通过对代码不断的进行小幅度的修改来改善其设计.
二者从不同角度阐述了设计的重要性.</blockquote>





* * *





#### 设计模式四重境界






  1. 一点不懂


  2. 学了几个模式, 总想着在自己的代码中套用, 常常误用


  3. 学完全部模式, 感觉都差不多, 无法分清差异


  4. 灵活应用, 甚至不应用具体的某种模式也能设计出好的代码, 无招胜有招





* * *





<blockquote>在学习设计模式之前, 我们先过一下[面向对象]的基本知识</blockquote>





* * *





#### 类和对象


**类**和**对象**是面向对象中的两个基本概念
**类** 指的是一类事物，是一个抽象的概念
**对象** 指的是属于某个类的一个实体/实例，是一个具体存在的事物




  1. 类是一种“模板”，可以通过这种模板创建出不同的对象“实例”


  2. 对象(“实例”)是类(“模板”)一个具体实现


  3. 一个类可以有很多对象，而一个对象必然属于某个类


![老虎类](http://img.blog.csdn.net/20150211184320315)

**类** 用于抽象的描述一类事物所特有的属性和行为.
**对象** 是一个具体的事物，拥有其所属类的所有属性，并且每个属性都有其特有的值.
如：老虎这个类有体重/食量/性情, 它的每个对象（也就是每只老虎），都有不同的体重，不同食量以及不同的性情

可以说某一个对象属于某一个类,就像 华南虎属于老虎!
但是你不能说某一个类属于一个对象, 就像 老虎属于华南虎? 这明显是错的.


##### 深入理解类






  1. 类不但可以抽象的描述一类事物的属性，也可以抽象的描述一类事物的行为


  2. 从同一个类细分出来的类不但继承了原有类的属性同时也继承了原有类的行为


  3. 继承出的新类可以拥有自己特有的属性和行为 属性主要用于描述类的静态特性，行为主要用于描述类的动态特性


如：老虎类的属性有颜色，体重，而行为有捕猎和逃跑，而兔子类的属性也有颜色和体重，但是兔子类的行为没有捕猎，只有逃跑.

另外，从一个更高的层面看，老虎和兔子都属于动物类，它们都继承了动物类的属性和行为，另外又有自己特定的属性和行为


##### 深入理解对象






  1. 对象是一个类的实例，所谓实例即一个类中的具体事物


  2. 一个类可以有多个实例，并且这些实例之间是互不相同的
如：”人类”中有几十亿个不同的个体，每一个人都是”人类”的一个实例


  3. 对象和类的关系如同模具和成品的关系，类就是一个模具，利用这个模具可以生成多个不同的成品，而这些成品就是各不相同的对象


  4. 同一个类的不同对象都有对应的类中的属性和行为，但是这些属性和行为可能不完全相同(即一个实例，拥有其所属类的所有属性，并且每个属性都有其特有的值.)





#### 封装




##### 什么是封装


类 通常分为以下两个部分:




  1. 类的实现细节


  2. 类的使用方式


每个对象都包含它能进行操作所需要的所有信息, 这个特性称为封装, 因此对象不必依赖其他对象来完成自己的操作.


##### 封装的好处






  1. 良好的封装能减少耦合


  2. 类内部的实现可以自由地修改


  3. 类具有清晰的对外接口





#### 继承


对象的继承代表了一种”is-a”的关系, 例如 “猫是哺乳动物”, 就说明了猫与哺乳动物之间是继承与被继承的关系.

继承还可以理解为对被继承都的特殊化, 因为它除了具备被继承者的特性外, 还具有自己独特的个性.




  1. 子类拥有父类的所有成员变量和成员函数


  2. 子类对象可以当作父类对象使用(因为父类的成员,子类都有)


  3. 子类可以拥有父类没有的方法和属性





##### 继承与访问级别


继承时的访问级别设定会影响到成员的访问级别


###### public继承


子类拥有父类的所有成员,父类成员在子类中保持原有访问级别


###### private继承


子类拥有父类的所有成员,父类成员在子类中变为private成员


###### 默认的是private继承


class Child : Parent {
等价于:
class Child : private Parent {

这样做的结果是:
子类拥有父类的所有成员,但是private继承使得父类的所有成员在子类中变为private级别的成员.


<blockquote>private成员在子类中依然存在，但是却无法访问到。</blockquote>





#### 多态




##### 何为多态


C++ 中通过**virtual**关键字对多态进行支持, 使用**virtual**声明的函数被重写后即可展现多态特性, 在C++中, 这种函数就叫做虚函数. 当然它的重写函数为了可读性也要加上**virtual**关键字(不写也没关系).

虚函数能够根据实际的对象决定函数调用语句的具体调用目标.

[cpp]class CMaster {
public:
    virtual int eightSwordSkill()
    {
        return 8;
    }

    CMaster(){}

protected:

private:
    CMaster(const CMaster& obj){}
};

class NewMaster : public CMaster {
public:
    NewMaster(){}

    virtual int eightSwordSkill()
    {
        return CMaster::eightSwordSkill() * 2;
    }

protected:

private:
    NewMaster(const NewMaster& obj){}
};[/cpp]





##### 纯虚函数


故意的只声明函数原型, 而不定义函数体的虚函数称为纯虚函数.


    <code>class Shape {
    public:
        virtual double area() = 0
    }</code>


area是纯虚函数, = 0 是告诉编译器, 这个函数故意只声明不定义


##### 抽象类






  1. 拥有纯虚函数的类称为抽象类


  2. 抽象类是一种只能定义类型, 而不能产生对象的类


  3. 抽象类只能被继承并重写相关函数, 可以用于定义指针和引用







#### 接口




##### 什么是接口.


接口是一个标准，是一个约定，而不是一种实现.
接口的目的是为了规范实现类，这样就可以不用具体管实现类，因为你不管怎是实现，我只要知道你是实现了这个接口，那么你肯定有那些方法，那么我调用这个接口的方法就肯定没问题.

举个例子，有一个接口，规定一个方法 int calc(int b);
这个函数用于计算从1到b的和

比如有两个类实现了这个接口


    <code>//第一类是这么实现的
    int calc(int b)
    {
    int sum = 0;
    for(int i=1;i<=b;i++)
    sum+=b;
    return sum
    }

    //第二个类是这么实现的
    int calc(int b)
    {
    int sum = 0;
    sum = (1+b) * b / 2
    return sum;
    }</code>


可见不管哪个类实现了这个接口，我们只要调用calc方法就能计算出sum，而不用管他是怎么实现的.

而C++在设计时, 接口这种概念还没有提出来, 所以C++中没有直接支持接口的语法, 但是可以使用纯虚函数来实现接口.


    <code>class Interface {
    public:
        virtual void func1() = 0;
        virtual void func2(int t) = 0;
        virtual void func3(int i, int j) = 0;

    protected:

    private:
    };</code>


接口类中只有函数原型定义, 没有任何数据的定义. 换句话说, 接口类中的函数只是功能说明, 并没有实际意义.

接口（interface）是抽像类的变体, 抽象类里面可以有非虚函数, 但接口里只能有虚函数.
"=p
