author: HanXiao
date: 2015-02-23 10:03
title: 13、[C++] 外观模式/门面模式

外观模式: 即为子系统中的一组接口提供一个一致的界面, 此模式定义了一个高层接口, 这个接口使得这一子系统更加容易使用.



[![外观模式](http://www.smallcpp.cn/wp-content/uploads/2015/02/thumb.jpg)](http://www.smallcpp.cn/wp-content/uploads/2015/02/b77d9bedff80.jpg)



Facade: 外观类, 他知道子类系统类负责处理的请求, 将客户的请求给适当的子系统对象.

SubSystemXxx: 子系统类, 他们实现子系统的功能, 处理外观类指派的任务.



我们大家最容易理解和知道的外观模式就是，使用的API接口的封装，我们将第三方的API接口引入到我们的项目中的时候，我们需要对这些接口进行包装，将具体调用过程进行包装成外观类的形式，通过外观类来进行统一的调用。



C++模拟代码如下:





    #include <iostream>
    <span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span><span style="color: #000000;"> std;

    </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> SubSystemOne {
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;">:
        </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> MethodOne() {
            cout </span><< <span style="color: #800000;">"</span><span style="color: #800000;">子系统方法一</span><span style="color: #800000;">"</span> <<<span style="color: #000000;"> endl;
        }
    };

    </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> SubSystemTwo {
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;">:
        </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> MethodTwo() {
            cout </span><< <span style="color: #800000;">"</span><span style="color: #800000;">子系统方法二</span><span style="color: #800000;">"</span> <<<span style="color: #000000;"> endl;
        }
    };

    </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> SubSystemThree {
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;">:
        </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> MethodThree() {
            cout </span><< <span style="color: #800000;">"</span><span style="color: #800000;">子系统方法三</span><span style="color: #800000;">"</span> <<<span style="color: #000000;"> endl;
        }
    };

    </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> Facade {
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;">:
        Facade() {
            m_pOne </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> SubSystemOne();
            m_pTwo </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> SubSystemTwo();
            m_pThree </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> SubSystemThree();
        }

        </span>~<span style="color: #000000;">Facade() {
            </span><span style="color: #0000ff;">if</span> (m_pOne !=<span style="color: #000000;"> NULL) {
                delete m_pOne;
            }
            </span><span style="color: #0000ff;">if</span> (m_pTwo !=<span style="color: #000000;"> NULL) {
                delete m_pTwo;
            }
            </span><span style="color: #0000ff;">if</span> (m_pThree !=<span style="color: #000000;"> NULL) {
                delete m_pThree;
            }
        }

        </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> MethodA() {
            m_pOne</span>-><span style="color: #000000;">MethodOne();
            m_pThree</span>-><span style="color: #000000;">MethodThree();
        }

        </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> MethodB() {
            m_pOne</span>-><span style="color: #000000;">MethodOne();
            m_pTwo</span>-><span style="color: #000000;">MethodTwo();
        }

    </span><span style="color: #0000ff;">protected</span><span style="color: #000000;">:
        SubSystemOne</span>* m_pOne =<span style="color: #000000;"> NULL;
        SubSystemTwo</span>* m_pTwo =<span style="color: #000000;"> NULL;
        SubSystemThree</span>* m_pThree =<span style="color: #000000;"> NULL;
    };

    </span><span style="color: #0000ff;">int</span> _tmain(<span style="color: #0000ff;">int</span> argc, _TCHAR*<span style="color: #000000;"> argv[]) {
        Facade facade;
        facade.MethodA();
        facade.MethodB();

        system(</span><span style="color: #800000;">"</span><span style="color: #800000;">PAUSE</span><span style="color: #800000;">"</span><span style="color: #000000;">);
        </span><span style="color: #0000ff;">return</span> <span style="color: #800080;">0</span><span style="color: #000000;">;
    }</span>









* * *



何时使用外观模式?

这要分三个阶段来说:

首先, 在设计初期, 应该要有意识的将不同的两个层分离, 比较经典的三层架构, 就需要考虑在数据访问层与业务逻辑层、业务逻辑层与表示层的层与层之间建立外观.

其次, 在开发阶段, 子系统往往因为不断的重构演化而变得越来越复杂, 大多数的模式使用时也都会产生很多很小的类, 这本是好事, 但也给外部调用它们的用户程序带来了使用上的困难, 增加外观类可以提供一个简单的接口, 减少它们之间的依赖.

最后, 在维护一个遗留的大型系统时, 可能这个系统已经非常难以维护和扩展了, 但因为它包含非常重要的功能, 新的需求开发必须要依赖它, 此时用外观模式也是非常合适的, 可以为新系统开发一个外观类, 来提供 设计粗糙或高度复杂的遗留代码 的比较清晰简单的接口, 让新系统与外观对象交互, 而外观对象与遗留代码交互所有复杂的工作.
c"a
