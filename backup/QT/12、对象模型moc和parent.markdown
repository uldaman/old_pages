author: HanXiao
date: 2015-03-08 14:02
title: 12、对象模型(moc和parent)

转自: [http://www.devbean.net/](http://www.devbean.net/)

在使用标准 C++ 编译器编译 Qt 源程序之前，Qt 先使用一个叫做 moc（Meta Object Compiler，元对象编译器）的工具，先对 Qt 源代码进行一次预处理（_注意，这个预处理与标准 C++ 的预处理有所不同。Qt 的 moc 预处理发生在标准 C++ 预处理器工作之前，并且 Qt 的 moc 预处理不是递归的。_），生成标准 C++ 源代码，然后再使用标准 C++ 编译器进行编译。如果你曾经为信号函数这样的语法感到奇怪（现在我们已经编译过一些 Qt 程序，你应当注意到了，信号函数是不需要编写实现代码的，那怎么可以通过标准 C++ 的编译呢？），这其实就是 moc 进行了处理之后的效果。

Qt 使用 moc，为标准 C++ 增加了一些特性：

1.信号槽机制，用于解决对象之间的通讯，这个我们已经了解过了，可以认为是 Qt 最明显的特性之一；

2.可查询，并且可设计的对象属性；

3.强大的事件机制以及事件过滤器；

4.基于上下文的字符串翻译机制（国际化），也就是 tr() 函数，我们简单地介绍过；

5.复杂的定时器实现，用于在事件驱动的 GUI 中嵌入能够精确控制的任务集成；

6.层次化的可查询的对象树，提供一种自然的方式管理对象关系。

7.智能指针（QPointer），在对象析构之后自动设为 0，防止野指针；

8.能够跨越库边界的动态转换机制。

通过继承`QObject`类，我们可以很方便地获得这些特性。当然，这些特性都是由 moc 帮助我们实现的。moc 其实实现的是一个叫做元对象系统（meta-object system）的机制。正如上面所说，这是一个标准 C++ 的扩展，使得标准 C++ 更适合于进行 GUI 编程。虽然利用模板可以达到类似的效果，但是 Qt 没有选择使用模板。按照 Qt 官方的说法，模板虽然是内置语言特性，但是其语法实在是复杂，并且由于 GUI 是动态的，利用静态的模板机制有时候很难处理。而自己使用 moc 生成代码更为灵活，虽然效率有些降低（一个信号槽的调用大约相当于四个模板函数调用），不过在现代计算机上，这点性能损耗实在是可以忽略。

在本节中，我们将主要介绍 Qt 的对象树。
在 Qt 中, 很多控件及类的构造函数有一个 parent 指针, 这个指针是什么?
现在我们就来解释这个 parent 到底是干什么的。

`QObject`是以对象树的形式组织起来的。当你创建一个`QObject`对象时，会看到`QObject`的构造函数接收一个`QObject`指针作为参数，这个参数就是 parent，也就是父对象指针。这相当于，在创建`QObject`对象时，可以提供一个其父对象，我们创建的这个`QObject`对象会自动添加到其父对象的`children()`列表。当父对象析构的时候，这个列表中的所有对象也会被析构。（**注意，这里的父对象并不是继承意义上的父类！**）这种机制在 GUI 程序设计中相当有用。例如，一个按钮有一个`QShortcut`（快捷键）对象作为其子对象。当我们删除按钮的时候，这个快捷键理应被删除。这是合理的。

`QWidget`是能够在屏幕上显示的一切组件的父类。`QWidget`继承自`QObject`，因此也继承了这种对象树关系。一个孩子自动地成为父组件的一个子组件。因此，它会显示在父组件的坐标系统中，被父组件的边界剪裁。例如，当用户关闭一个对话框的时候，应用程序将其删除，那么，我们希望属于这个对话框的按钮、图标等应该一起被删除。事实就是如此，因为这些都是对话框的子组件。

当然，我们也可以自己删除子对象，它们会自动从其父对象列表中删除。比如，当我们删除了一个工具栏时，其所在的主窗口会自动将该工具栏从其子对象列表中删除，并且自动调整屏幕显示。

我们可以使用`QObject::dumpObjectTree()`和`QObject::dumpObjectInfo()`这两个函数进行这方面的调试。

Qt 引入对象树的概念，在一定程度上解决了内存问题: 如果指针对象有父对象时, 可以不用显式释放内存, 我们需要显式释放的是那些没有父对象的孤立的指针.

当一个`QObject`对象在堆上创建的时候，Qt 会同时为其创建一个对象树。不过，对象树中对象的顺序是没有定义的。这意味着，销毁这些对象的顺序也是未定义的。Qt 保证的是，任何对象树中的 `QObject`对象 delete 的时候，如果这个对象有 parent，则自动将其从 parent 的`children()`列表中删除；如果有孩子，则自动 delete 每一个孩子。Qt 保证没有`QObject`会被 delete 两次，这是由析构顺序决定的。

如果`QObject`在栈上创建，Qt 保持同样的行为。正常情况下，这也不会发生什么问题。来看下下面的代码片段：





    <span style="color: #000000;">{
        QWidget window;
        QPushButton quit(</span><span style="color: #800000;">"</span><span style="color: #800000;">Quit</span><span style="color: #800000;">"</span>, &<span style="color: #000000;">window);
    }</span>







作为父组件的 window 和作为子组件的 quit 都是`QObject`的子类（事实上，它们都是`QWidget`的子类，而`QWidget`是`QObject`的子类）。这段代码是正确的，quit 的析构函数不会被调用两次，因为标准 C++ （ISO/IEC 14882:2003）要求，局部对象的析构顺序应该按照其创建顺序的相反过程。因此，这段代码在超出作用域时，会先调用 quit 的析构函数，将其从父对象 window 的子对象列表中删除，然后才会再调用 window 的析构函数。

但是，如果我们使用下面的代码：





    <span style="color: #000000;">{
        QPushButton quit(</span><span style="color: #800000;">"</span><span style="color: #800000;">Quit</span><span style="color: #800000;">"</span><span style="color: #000000;">);
        QWidget window;

        quit.setParent(</span>&<span style="color: #000000;">window);
    }</span>







情况又有所不同，析构顺序就有了问题。我们看到，在上面的代码中，作为父对象的 window 会首先被析构，因为它是最后一个创建的对象。在析构过程中，它会调用子对象列表中每一个对象的析构函数，也就是说， quit 此时就被析构了。然后，代码继续执行，在 window 析构之后，quit 也会被析构，因为 quit 也是一个局部变量，在超出作用域的时候当然也需要析构。但是，这时候已经是第二次调用 quit 的析构函数了，C++ 不允许调用两次析构函数，因此，程序崩溃了。

由此我们看到，Qt 的对象树机制虽然帮助我们在一定程度上解决了内存问题，但是也引入了一些值得注意的事情。这些细节在今后的开发过程中很可能时不时跳出来烦扰一下，所以，我们最好从开始就养成良好习惯，在 Qt 中，**尽量在构造的时候就指定 parent 对象，并且大胆在堆上创建。**
?
