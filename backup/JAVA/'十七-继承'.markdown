author: Martin
date: 2015-06-12 14:43
title: (十七) 继承

继承的概念都是一样的, 但是 Java 中继承的语法就和 C++ 中不一样了.

语法: class 子类 extends 父类 { . . . }

其他的和 C++ 上就差不多了:

*. 方法重写

*. 初始化顺序: 先父类再子类

*. final 关键字 (C++11 中才有)
这个关键字要说明一下, 它可以修饰类、方法、属性和变量;
修饰类时, 则该类不可能被继承:
修饰方法时, 则该方法不允许被覆盖;
修饰属性时, 则该属性不会进行隐式的初始化, 必须要指定初始值或在构造方法中赋值;
修饰变量时, 表示这个是常量.


# super 关键字


Java 除了提供了 this 代表当前对象外, 还提供了一个 super 关键字代表当前对象的父类对象.

例如, 父类中有一个 name 属性和一个 eat() 方法, 如果想要在子类中调用, 就可以这么用: super.name; super.eat();

super 关键字还有一个非常重要的应用, 就是调用父类的构造方法.
首先要明白一点, 子类是不会继承父类的构造函数的, 但是在构造子类的时候, 又是先构造的父类, 这其实就是默认的子类构造函数会隐式的调用 super().
也就是说如果子类的构造方法中没有显示的调用父类的构造方法, 系统会默认调用父类的无参构造方法;
如果想要显示的调用父类的构造方法, 必须写在子类构造方法的第一行;
另外, 需要注意, 如果子类没有显示的调用 super, 而父类又没有无参的构造方法, 则会报错.


# Object 类


Object 类是 Java 中一个特殊的类, 它是所有类的父类;
正因为这样, 所以 Object 类中的方法可以在所有类中适用.

这里说两个比较常用的方法:

- toString() 方法: 返回对象的哈希码(对象地址字符串), 例如 System.out.println(对象名), 就会输出这个字符串; 如果希望输出其它的内容, 就可以重写 toString() 方法.
- equals() 方法: 比较对象的引用是否指向同一块内存(引用类似 C 中的指针). 如果想要比较的是两个对象某个属性的值, 就可以重写该方法.

通过 Eclipse 主菜单的源码菜单可以快速重写这些方法.

![](http://i60.tinypic.com/2u3xxk2.jpg)
